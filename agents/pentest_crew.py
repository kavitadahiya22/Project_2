"""
Main penetration testing crew orchestrator - Custom implementation
"""
import uuid
from datetime import datetime
from typing import Dict
import logging

from .network_recon_agent import NetworkReconAgent
from .vuln_assessment_agent import VulnAssessmentAgent
from .exploitation_agent import ExploitationAgent
from .reporting_agent import ReportingAgent
from models.request_models import PentestRequest, PentestResponse, PentestResult, Vulnerability, Severity

logger = logging.getLogger(__name__)

class PentestCrew:
    """Main crew orchestrator for penetration testing"""
    
    def __init__(self):
        # Initialize all agents
        self.network_recon = NetworkReconAgent()
        self.vuln_assessment = VulnAssessmentAgent()
        self.exploitation = ExploitationAgent()
        self.reporting = ReportingAgent()
    
    async def execute_pentest(self, request: PentestRequest) -> PentestResponse:
        """Execute complete penetration testing workflow"""
        task_id = f"pentest_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{str(uuid.uuid4())[:8]}"
        start_time = datetime.now()
        
        try:
            logger.info(f"Starting pentest task {task_id} for target {request.target}")
            
            # Execute the crew workflow
            results = await self._execute_workflow(request, task_id)
            
            end_time = datetime.now()
            duration = int((end_time - start_time).total_seconds())
            
            # Parse and structure the results
            pentest_result = self._parse_results(
                results, request, start_time, end_time, duration, task_id
            )
            
            return PentestResponse(
                success=True,
                message="Penetration test completed successfully",
                task_id=task_id,
                result=pentest_result
            )
            
        except Exception as e:
            logger.error(f"Pentest task {task_id} failed: {e}")
            return PentestResponse(
                success=False,
                message=f"Penetration test failed: {str(e)}",
                task_id=task_id,
                result=None
            )
    
    async def _execute_workflow(self, request: PentestRequest, task_id: str) -> Dict[str, str]:
        """Execute the complete penetration testing workflow"""
        results: Dict[str, str] = {}
        
        # Phase 1: Network Reconnaissance
        logger.info("Phase 1: Network Reconnaissance")
        recon_task = f"""Perform comprehensive network reconnaissance on target: {request.target}
        
Scope: {request.scope or 'Full scope'}
Exclusions: {request.exclude or 'None'}
Testing depth: {request.depth}

Your tasks:
1. Identify live hosts and network topology
2. Perform port scanning to discover open services  
3. Enumerate services and gather version information
4. Identify potential attack vectors
5. Document all findings with technical details

Provide a detailed report of discovered services, ports, and initial observations.
"""
        
        results['recon'] = await self.network_recon.execute_task(recon_task)
        
        # Phase 2: Vulnerability Assessment
        logger.info("Phase 2: Vulnerability Assessment")
        vuln_task = f"""Analyze the network reconnaissance results and perform vulnerability assessment.

Based on the reconnaissance findings:
1. Identify potential security vulnerabilities in discovered services
2. Research known CVEs for identified software versions
3. Assess configuration weaknesses
4. Evaluate authentication mechanisms
5. Prioritize vulnerabilities by risk level (Critical, High, Medium, Low)

Reconnaissance Context: {results['recon'][:1000]}...

Provide a comprehensive vulnerability report with CVSS scores where applicable.
"""
        
        results['vuln'] = await self.vuln_assessment.execute_task(vuln_task, results['recon'])
        
        # Phase 3: Safe Exploitation Validation
        logger.info("Phase 3: Safe Exploitation Validation")
        exploit_task = f"""Safely validate the identified vulnerabilities through controlled testing.

Based on vulnerability assessment results:
1. Select appropriate proof-of-concept exploits
2. Perform safe validation without causing damage
3. Document successful exploits with evidence
4. Identify potential post-exploitation opportunities
5. Maintain detailed logs of all activities

Vulnerability Context: {results['vuln'][:1000]}...

Focus on proving vulnerabilities exist while maintaining system integrity.
"""
        
        results['exploit'] = await self.exploitation.execute_task(exploit_task, results['vuln'])
        
        # Phase 4: Report Generation
        logger.info("Phase 4: Report Generation")
        report_task = f"""Generate a comprehensive penetration testing report based on all findings.

Compile results from:
- Network reconnaissance
- Vulnerability assessment  
- Exploitation validation

Create a professional report including:
1. Executive summary with risk overview
2. Detailed technical findings
3. Vulnerability descriptions with evidence
4. Risk ratings and business impact
5. Prioritized remediation recommendations
6. Appendices with technical details

Target: {request.target}
Test Type: {request.pentest_type}
Task ID: {task_id}

All findings context: 
Recon: {results['recon'][:500]}...
Vuln: {results['vuln'][:500]}...
Exploit: {results['exploit'][:500]}...
"""
        
        results['report'] = await self.reporting.execute_task(
            report_task, 
            f"Recon: {results['recon']}\n\nVuln: {results['vuln']}\n\nExploit: {results['exploit']}"
        )
        
        return results
    
    def _parse_results(self, results: Dict[str, str], request: PentestRequest, 
                      start_time: datetime, end_time: datetime, 
                      duration: int, task_id: str) -> PentestResult:
        """Parse crew results into structured format"""
        
        # For demo purposes, create sample vulnerabilities based on AI analysis
        # In a real implementation, this would parse the actual results
        sample_vulnerabilities = [
            Vulnerability(
                id="VULN-001",
                title="AI-Identified Security Concern",
                description="Potential security vulnerability identified through AI-powered analysis of the target system",
                severity=Severity.MEDIUM,
                cvss_score=6.5,
                affected_service="target-service",
                port=80,
                evidence="Evidence gathered through AI agent analysis",
                recommendation="Implement security controls as recommended by the AI analysis",
                references=["https://example.com/vuln-ref"]
            )
        ]
        
        # Extract summary from results
        summary = f"AI-powered penetration test completed for {request.target}. Custom agent framework successfully analyzed the target and identified potential security concerns."
        
        recommendations = [
            "Review and validate AI-generated findings with manual verification",
            "Implement recommended security controls based on agent analysis",
            "Conduct regular security assessments using AI-enhanced methodologies",
            "Monitor for new vulnerabilities and emerging threats"
        ]
        
        return PentestResult(
            target=request.target,
            pentest_type=request.pentest_type.value,
            status="completed",
            start_time=start_time,
            end_time=end_time,
            duration_seconds=duration,
            vulnerabilities=sample_vulnerabilities,
            summary=summary,
            recommendations=recommendations,
            raw_output={
                "recon_analysis": results.get('recon', ''),
                "vuln_analysis": results.get('vuln', ''),
                "exploit_analysis": results.get('exploit', ''),
                "final_report": results.get('report', '')
            }
        )
